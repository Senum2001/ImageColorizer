# -*- coding: utf-8 -*-
"""Image Colorizer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hKy4XTpsxlG6YQuvPIeZqORd1dZAGlI9
"""

!wget https://www.dropbox.com/scl/fi/2sf0na2wz6q97cm1gw8qx/archive-5.zip?rlkey=3i13fvx2ib17tqs6w4odj0fqm&st=iiixzl1i&dl=0

!unzip archive-5.zip?rlkey=3i13fvx2ib17tqs6w4odj0fqm&st=iiixzl1i&dl=0

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import os
import shutil
from skimage.color import rgb2lab, lab2rgb #Lab is a RBG color stream
from skimage.io import imread, imshow

TRAIN_ROOT_DIR = "/content/train"
DESTINATION = "/content/train1/images"

if not os.path.exists(DESTINATION):
    os.makedirs(DESTINATION)

for dir in os.listdir(TRAIN_ROOT_DIR):
    dir_path = os.path.join(TRAIN_ROOT_DIR, dir)
    if os.path.isdir(dir_path):  # Ensure it's a directory
        for img in os.listdir(dir_path):
            if img.endswith('.jpg'):  # Check for .jpg files , change the extension for different formats
                ORIGIN = os.path.join(dir_path, img)
                try:
                    imread(ORIGIN)  # Read the image to check if it's valid
                    shutil.copy(ORIGIN, DESTINATION)
                    print(f"Copied: {ORIGIN}")
                except Exception as e:
                    print(f"Cannot be used: {ORIGIN}, error: {e}")
            else:
                print(f"Skipped non-png file: {img}")

len(os.listdir("/content/train1/images"))

from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(
    rescale=1./255,
    featurewise_center=True,
    rotation_range=40,
    horizontal_flip=True
)

train = train_datagen.flow_from_directory(
    "/content/train1/",
    target_size=(256, 256),
    batch_size=2000,
    shuffle=True
)

t_img,label=train.next()

def plotIMG(img_arr,label):
  plt.figure(figsize=(10,10))
  for im,l in zip(img_arr,label):
    plt.imshow(im)
    plt.title(im.shape)
    plt.axis('off')
    plt.show()

plotIMG(t_img[:10],label[:10])

label.shape

X = []
Y = []

for image in t_img:
    try:
        lab = rgb2lab(image)
        X.append(lab[:, :, 0])  # Append the L channel
        Y.append(lab[:, :, 1:] / 128)  # Append the a and b channels normalized
    except Exception as e:
        print(f"Error: {e}")

X_train=np.array(X)
X_train=np.expand_dims(X_train,axis=len(X_train.shape))
X_train.shape
Y_train=np.array(Y)
Y_train.shape

from keras.layers import Input, Conv2D, MaxPool2D, UpSampling2D, Input, LeakyReLU
from keras.models import Sequential

# Encoder
model = Sequential()
model.add(Conv2D(64, (3, 3), activation='relu', padding='same', strides=2, input_shape=(256, 256, 1)))
model.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
model.add(Conv2D(128, (3, 3), activation='relu', padding='same', strides=2))
model.add(Conv2D(256, (3, 3), activation='relu', padding='same'))
model.add(Conv2D(256, (3, 3), activation='relu', padding='same', strides=2))
model.add(Conv2D(512, (3, 3), activation='relu', padding='same'))
model.add(Conv2D(512, (3, 3), activation='relu', padding='same'))
model.add(Conv2D(256, (3, 3), activation='relu', padding='same'))

# Decoder
model.add(Conv2D(128, (3, 3), activation='relu', padding='same'))
model.add(UpSampling2D((2, 2)))
model.add(Conv2D(64, (3, 3), activation='relu', padding='same'))
model.add(UpSampling2D((2, 2)))
model.add(Conv2D(32, (3, 3), activation='relu', padding='same'))
model.add(Conv2D(16, (3, 3), activation='relu', padding='same'))
model.add(Conv2D(2, (3, 3), padding='same'))
model.add(LeakyReLU(alpha=0.01))
model.add(UpSampling2D((2, 2)))

model.summary()

model.compile(optimizer='adam', metrics=['acc'], loss='mse')

his=model.fit(X_train,Y_train,epochs=100,batch_size=64, steps_per_epoch=X_train.shape[0]//64,verbose=1)

model.save("./bestmodel.h5")

from tensorflow.keras.preprocessing.image import load_img, img_to_array
# Load and process the image
path = '/content/mohana-antonmeryl-beautiful-close-up-of-a-butterfly-in-the-garden_u-l-q130jmc0.jpg'
img = img_to_array(load_img(path, target_size=(256, 256)))/255

# Display the image
plt.title('Input Image')
imshow(img)
plt.axis('off')
plt.show()

img1_color = []
img1_color.append(img)
img1_color = np.array(img1_color)  # Convert list to numpy array
img1_color = rgb2lab(img1_color)[:,:,:,0]
img1_color = img1_color.reshape(img1_color.shape + (1,))

output1=model.predict(img1_color)
output1=output1*128

result=np.zeros((256,256,3))
result[:,:,0]=img1_color[0][:,:,0]
result[:,:,1:]=output1[0]

imshow(lab2rgb(result))
